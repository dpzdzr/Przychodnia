// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przychodnia.Data;

#nullable disable

namespace Przychodnia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250429164124_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Przychodnia.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttendingDoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduledById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttendingDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduledById");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Przychodnia.Model.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExaminationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformingDoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformingLaboratoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("PerformingDoctorId");

                    b.HasIndex("PerformingLaboratoryId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Przychodnia.Model.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("Przychodnia.Model.ManagementPeriod", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("from")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("to")
                        .HasColumnType("TEXT");

                    b.HasKey("ManagerId", "LaboratoryId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("ManagementPeriods");
                });

            modelBuilder.Entity("Przychodnia.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<int?>("sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Przychodnia.Model.PostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("Przychodnia.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            PasswordHash = "admin",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("Przychodnia.Model.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Przychodnia.Model.Appointment", b =>
                {
                    b.HasOne("Przychodnia.Model.User", "AttendingDoctor")
                        .WithMany("AttendedAppointments")
                        .HasForeignKey("AttendingDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.User", "ScheduledBy")
                        .WithMany("ScheduledAppointments")
                        .HasForeignKey("ScheduledById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendingDoctor");

                    b.Navigation("Patient");

                    b.Navigation("ScheduledBy");
                });

            modelBuilder.Entity("Przychodnia.Model.Examination", b =>
                {
                    b.HasOne("Przychodnia.Model.User", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.User", "PerformingDoctor")
                        .WithMany()
                        .HasForeignKey("PerformingDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.Laboratory", "PerformingLaboratory")
                        .WithMany()
                        .HasForeignKey("PerformingLaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderedBy");

                    b.Navigation("Patient");

                    b.Navigation("PerformingDoctor");

                    b.Navigation("PerformingLaboratory");
                });

            modelBuilder.Entity("Przychodnia.Model.ManagementPeriod", b =>
                {
                    b.HasOne("Przychodnia.Model.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Model.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Przychodnia.Model.Patient", b =>
                {
                    b.HasOne("Przychodnia.Model.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("Przychodnia.Model.User", b =>
                {
                    b.HasOne("Przychodnia.Model.Laboratory", "Laboratory")
                        .WithOne("Manager")
                        .HasForeignKey("Przychodnia.Model.User", "LaboratoryId");

                    b.HasOne("Przychodnia.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Przychodnia.Model.Laboratory", b =>
                {
                    b.Navigation("Manager")
                        .IsRequired();
                });

            modelBuilder.Entity("Przychodnia.Model.User", b =>
                {
                    b.Navigation("AttendedAppointments");

                    b.Navigation("ScheduledAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
