// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przychodnia.Data;

#nullable disable

namespace Przychodnia.Migrations
{
    [DbContext(typeof(MyAppContext))]
    partial class MyAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Przychodnia.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttendingDoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduledById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttendingDoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduledById");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Przychodnia.Models.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExaminationType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformingDoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformingLaboratoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("PerformingDoctorId");

                    b.HasIndex("PerformingLaboratoryId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Przychodnia.Models.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("Przychodnia.Models.ManagementPeriod", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("from")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("to")
                        .HasColumnType("TEXT");

                    b.HasKey("ManagerId", "LaboratoryId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("ManagementPeriod");
                });

            modelBuilder.Entity("Przychodnia.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<int?>("sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Przychodnia.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId")
                        .IsUnique();

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Przychodnia.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Przychodnia.Models.Appointment", b =>
                {
                    b.HasOne("Przychodnia.Models.User", "AttendingDoctor")
                        .WithMany("AttendedAppointments")
                        .HasForeignKey("AttendingDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.User", "ScheduledBy")
                        .WithMany("ScheduledAppointments")
                        .HasForeignKey("ScheduledById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendingDoctor");

                    b.Navigation("Patient");

                    b.Navigation("ScheduledBy");
                });

            modelBuilder.Entity("Przychodnia.Models.Examination", b =>
                {
                    b.HasOne("Przychodnia.Models.User", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.User", "PerformingDoctor")
                        .WithMany()
                        .HasForeignKey("PerformingDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.Laboratory", "PerformingLaboratory")
                        .WithMany()
                        .HasForeignKey("PerformingLaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderedBy");

                    b.Navigation("Patient");

                    b.Navigation("PerformingDoctor");

                    b.Navigation("PerformingLaboratory");
                });

            modelBuilder.Entity("Przychodnia.Models.ManagementPeriod", b =>
                {
                    b.HasOne("Przychodnia.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Przychodnia.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Przychodnia.Models.User", b =>
                {
                    b.HasOne("Przychodnia.Models.Laboratory", "Laboratory")
                        .WithOne("Manager")
                        .HasForeignKey("Przychodnia.Models.User", "LaboratoryId");

                    b.HasOne("Przychodnia.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Przychodnia.Models.Laboratory", b =>
                {
                    b.Navigation("Manager")
                        .IsRequired();
                });

            modelBuilder.Entity("Przychodnia.Models.User", b =>
                {
                    b.Navigation("AttendedAppointments");

                    b.Navigation("ScheduledAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
